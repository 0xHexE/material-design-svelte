(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('svelte/internal'), require('@material/ripple'), require('svelte')) :
    typeof define === 'function' && define.amd ? define(['svelte/internal', '@material/ripple', 'svelte'], factory) :
    (global = global || self, global.MaterialComponentsSvelte = factory(global.internal, global.ripple, global.svelte));
}(this, function (internal, ripple, svelte) { 'use strict';

    /* src/icon.svelte generated by Svelte v3.2.2 */

    function create_fragment(ctx) {
    	var i, t;

    	return {
    		c() {
    			i = internal.element("i");
    			t = internal.text(ctx.icon);
    			i.className = "material-icons mdc-button__icon";
    			internal.attr(i, "aria-hidden", ctx.ariaHidden);
    		},

    		m(target, anchor) {
    			internal.insert(target, i, anchor);
    			internal.append(i, t);
    		},

    		p(changed, ctx) {
    			if (changed.icon) {
    				internal.set_data(t, ctx.icon);
    			}

    			if (changed.ariaHidden) {
    				internal.attr(i, "aria-hidden", ctx.ariaHidden);
    			}
    		},

    		i: internal.noop,
    		o: internal.noop,

    		d(detaching) {
    			if (detaching) {
    				internal.detach(i);
    			}
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let { icon = '', ariaHidden = false } = $$props;

    	$$self.$set = $$props => {
    		if ('icon' in $$props) $$invalidate('icon', icon = $$props.icon);
    		if ('ariaHidden' in $$props) $$invalidate('ariaHidden', ariaHidden = $$props.ariaHidden);
    	};

    	return { icon, ariaHidden };
    }

    class Icon extends internal.SvelteComponent {
    	constructor(options) {
    		super();
    		internal.init(this, options, instance, create_fragment, internal.safe_not_equal, ["icon", "ariaHidden"]);
    	}
    }

    /* src/button.svelte generated by Svelte v3.2.2 */

    // (38:4) {#if icon}
    function create_if_block(ctx) {
    	var current;

    	var icon_1 = new Icon({ props: { icon: ctx.icon } });

    	return {
    		c() {
    			icon_1.$$.fragment.c();
    		},

    		m(target, anchor) {
    			internal.mount_component(icon_1, target, anchor);
    			current = true;
    		},

    		p(changed, ctx) {
    			var icon_1_changes = {};
    			if (changed.icon) icon_1_changes.icon = ctx.icon;
    			icon_1.$set(icon_1_changes);
    		},

    		i(local) {
    			if (current) return;
    			icon_1.$$.fragment.i(local);

    			current = true;
    		},

    		o(local) {
    			icon_1.$$.fragment.o(local);
    			current = false;
    		},

    		d(detaching) {
    			icon_1.$destroy(detaching);
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	var button, t, span, current, dispose;

    	var if_block = (ctx.icon) && create_if_block(ctx);

    	const default_slot_1 = ctx.$$slots.default;
    	const default_slot = internal.create_slot(default_slot_1, ctx, null);

    	var button_levels = [
    		{ id: ctx._uniqueId },
    		{ class: `mdc-button ${ ctx.classList }` },
    		{ disabled: ctx.disabled },
    		ctx.$$props
    	];

    	var button_data = {};
    	for (var i = 0; i < button_levels.length; i += 1) {
    		button_data = internal.assign(button_data, button_levels[i]);
    	}

    	return {
    		c() {
    			button = internal.element("button");
    			if (if_block) if_block.c();
    			t = internal.space();
    			span = internal.element("span");

    			if (default_slot) default_slot.c();

    			span.className = "mdc-button__label";
    			internal.set_attributes(button, button_data);
    			internal.toggle_class(button, "mdc-button--outlined", ctx.variantMatch === 'outline');
    			internal.toggle_class(button, "mdc-button--raised", ctx.variantMatch === 'raised');
    			internal.toggle_class(button, "mdc-button--unelevated", ctx.variantMatch === 'unelevated');
    			internal.toggle_class(button, "mdc-button--dense", ctx.dense);
    			internal.toggle_class(button, "mdc-button__icon", !!ctx.icon);
    			dispose = internal.listen(button, "click", ctx.click_handler);
    		},

    		l(nodes) {
    			if (default_slot) default_slot.l(span_nodes);
    		},

    		m(target, anchor) {
    			internal.insert(target, button, anchor);
    			if (if_block) if_block.m(button, null);
    			internal.append(button, t);
    			internal.append(button, span);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			current = true;
    		},

    		p(changed, ctx) {
    			if (ctx.icon) {
    				if (if_block) {
    					if_block.p(changed, ctx);
    					if_block.i(1);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.i(1);
    					if_block.m(button, t);
    				}
    			} else if (if_block) {
    				internal.group_outros();
    				internal.on_outro(() => {
    					if_block.d(1);
    					if_block = null;
    				});

    				if_block.o(1);
    				internal.check_outros();
    			}

    			if (default_slot && default_slot.p && changed.$$scope) {
    				default_slot.p(internal.get_slot_changes(default_slot_1, ctx, changed, null), internal.get_slot_context(default_slot_1, ctx, null));
    			}

    			internal.set_attributes(button, internal.get_spread_update(button_levels, [
    				(changed._uniqueId) && { id: ctx._uniqueId },
    				(changed.classList) && { class: `mdc-button ${ ctx.classList }` },
    				(changed.disabled) && { disabled: ctx.disabled },
    				(changed.$$props) && ctx.$$props
    			]));

    			if (changed.variantMatch) {
    				internal.toggle_class(button, "mdc-button--outlined", ctx.variantMatch === 'outline');
    				internal.toggle_class(button, "mdc-button--raised", ctx.variantMatch === 'raised');
    				internal.toggle_class(button, "mdc-button--unelevated", ctx.variantMatch === 'unelevated');
    			}

    			if (changed.dense) {
    				internal.toggle_class(button, "mdc-button--dense", ctx.dense);
    			}

    			if (changed.icon) {
    				internal.toggle_class(button, "mdc-button__icon", !!ctx.icon);
    			}
    		},

    		i(local) {
    			if (current) return;
    			if (if_block) if_block.i();
    			if (default_slot && default_slot.i) default_slot.i(local);
    			current = true;
    		},

    		o(local) {
    			if (if_block) if_block.o();
    			if (default_slot && default_slot.o) default_slot.o(local);
    			current = false;
    		},

    		d(detaching) {
    			if (detaching) {
    				internal.detach(button);
    			}

    			if (if_block) if_block.d();

    			if (default_slot) default_slot.d(detaching);
    			dispose();
    		}
    	};
    }

    let buttonUniqueIdCounter = 0;

    function instance$1($$self, $$props, $$invalidate) {
    	

        let { ripple: ripple$1 = true, variant = '', disabled = false, classList = '', dense = false, icon = '' } = $$props;

        const _uniqueId = `mdc-button-svelte-id-${ buttonUniqueIdCounter++ }`;

        if (ripple$1) {
            svelte.onMount(() => {
                new ripple.MDCRipple(document.querySelector(`#${ _uniqueId }`));
            });
        }

    	let { $$slots = {}, $$scope } = $$props;

    	function click_handler(event) {
    		internal.bubble($$self, event);
    	}

    	$$self.$set = $$new_props => {
    		$$invalidate('$$props', $$props = internal.assign(internal.assign({}, $$props), $$new_props));
    		if ('ripple' in $$props) $$invalidate('ripple', ripple$1 = $$props.ripple);
    		if ('variant' in $$props) $$invalidate('variant', variant = $$props.variant);
    		if ('disabled' in $$props) $$invalidate('disabled', disabled = $$props.disabled);
    		if ('classList' in $$props) $$invalidate('classList', classList = $$props.classList);
    		if ('dense' in $$props) $$invalidate('dense', dense = $$props.dense);
    		if ('icon' in $$props) $$invalidate('icon', icon = $$props.icon);
    		if ('$$scope' in $$new_props) $$invalidate('$$scope', $$scope = $$new_props.$$scope);
    	};

    	let variantMatch;

    	$$self.$$.update = ($$dirty = { variant: 1 }) => {
    		if ($$dirty.variant) { $$invalidate('variantMatch', variantMatch = `${ variant || '' }`.toLowerCase()); }
    	};

    	return {
    		ripple: ripple$1,
    		variant,
    		disabled,
    		classList,
    		dense,
    		icon,
    		_uniqueId,
    		variantMatch,
    		click_handler,
    		$$props,
    		$$props: $$props = internal.exclude_internal_props($$props),
    		$$slots,
    		$$scope
    	};
    }

    class Button extends internal.SvelteComponent {
    	constructor(options) {
    		super();
    		internal.init(this, options, instance$1, create_fragment$1, internal.safe_not_equal, ["ripple", "variant", "disabled", "classList", "dense", "icon"]);
    	}
    }

    /* src/index.svelte generated by Svelte v3.2.2 */

    function create_fragment$2(ctx) {
    	return {
    		c: internal.noop,
    		m: internal.noop,
    		p: internal.noop,
    		i: internal.noop,
    		o: internal.noop,
    		d: internal.noop
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	
        const MDCButton = Button, MDCIcon = Icon;

    	return { MDCButton, MDCIcon };
    }

    class Index extends internal.SvelteComponent {
    	constructor(options) {
    		super();
    		internal.init(this, options, instance$2, create_fragment$2, internal.safe_not_equal, ["MDCButton", "MDCIcon"]);
    	}

    	get MDCButton() {
    		return this.$$.ctx.MDCButton;
    	}

    	get MDCIcon() {
    		return this.$$.ctx.MDCIcon;
    	}
    }

    return Index;

}));
